*** CONSTRUCTOR ***

>>  Constructor is a special method which is used to create object
>>  If a user doesn't create a constructor then it is automatically created by
    the JVM.
>>  Whenever a new object is created using the new keyword the constructor is
    called automatically.

>>  There are two types of CONSTRUCTORS :-
        a. Default constructor
        b. Parameterized or user Defined constructor
----------------------------------------------------------------------------------------
*** ENCAPSULATION ***

>>  Encapsulation is a way to restrict the direct access to some components of an
    object, so users cannot access state values for all of the variables of a
    particular object.
----------------------------------------------------------------------------------------
*** INHERITANCE ***

>>  Inheritance in Java is a mechanism in which one object acquires all the
    properties and behaviors of a parent object. It is an important part of
    OOPs (Object Oriented programming system).
----------------------------------------------------------------------------------------
*** POLYMORPHISM ***

>>  The process by which same method can have different meaning in different classes
    or same class is called POLYMORPHISM.

>>  There are two types of POLYMORPHISM :-
    a. Compile Time Polymorphism - (METHOD OVERLOADING)
    b. Run Time Polymorphism - (METHOD OVERRIDING)

    - If a class with multiple methods having the same name but different parameters
      it is known as METHOD OVERLOADING.
    - If a class with same methods from parent class taken to the child class and
      incremented differently is known as METHOD OVERRIDING.
    - Methods must have the same parameter as in the parent class there should be an
      inheritance relationship between the classes.
----------------------------------------------------------------------------------------
*** ABSTRACTION ***

>>  Hiding the implementation details and only showing functionality to the user is
    called ABSTRACTION.

    >>  ABSTRACTION are of two ways in JAVA :-
        a. ABSTRACT CLASSES and METHODS (0% - 100%)
        b. INTERFACES (100%)

        >>> ABSTRACT CLASSES & METHODS -

            1. ABSTRACT Classes -
               - It is a restricted class which can not have objects.
               - We need to inherit this class to create objects.

            2. ABSTRACT Methods -
               - These Methods can be used in Abstract Classes and they do not have a body.
               - The body of a Abstract Method is provided in the Child Class.

            ** An Abstract can have both Abstract Methods and regular Methods.
            ** If we have only Abstract Methods in an Abstract Class it is 100% Abstraction.
            ** That's why Abstract Class can achieve 100% Abstraction.

        >>> INTERFACES
            - An Interface is a complete Abstract Class that is used to group related methods
              with empty bodies.
            - The body of all the methods are provided in the classes with implements the
              Interface.

            >> Uses of an INTERFACE :-
               - Security
               - We achieve Multiple-Inheritance using INTERFACES.
               - To implement Multiple-Interfaces with separate it with COMAS(,).
----------------------------------------------------------------------------------------
*** ASSOCIATION ***

>>  Association in JAVA signifies the relation between classes.

    >>  There are two types of association in JAVA :-
        -   Aggregation (It is a week relationship between the classes)
            > Loosely Coupled
        -   Composition (It is a strong relationship between the classes)
            > Tightly Coupled
----------------------------------------------------------------------------------------
*** STRING BUFFER & STRING BUILDER ***

>>  There are few differences between String Buffer & StringBuilder.

    >>  The differences are :-
        - StringBuffer was introduced prior to String Builder in JAVA.
        - StringBuffer is less efficient then StringBuilder.
        - StringBuffer is synchronized that is thread safe.
          (It means two threads can't call the methods of StringBuffer simultaneously)
        - StringBuilder is not-synchronized that is not thread safe.
          (It means two threads can call the methods StringBuilder simultaneously)
        - Due to synchronization StringBuffer become lot slower than StringBuilder.
----------------------------------------------------------------------------------------
*** STATIC KEYWORD USES ***

>>  We can use static keyword in various types that are :-
    - Static keyword is used for better memory management
    - Static keyword can be accessed from inside a class directly without any object
    - Static keyword can be accessed outside a class without creating object simply
      by using class name.
    - Static keyword belongs to the class and not to any particular object.
----------------------------------------------------------------------------------------
*** GENERICS ***

>>  Declaring the data type of the variable before using it is called as safe typing.
>>  Generics means introducing the type of objects that is going to be stored.
>>  Forces JAVA programmers to store only specific data type.
>>  In JAVA generics a wild card is a special symbol(?) that represents an unknown
    type. It allows us to work with generic classes, generic methods or interfaces in
    a more flexible way that when the exact type is not important or known in advance.

    >>  There are two types of WILD CARD in generics
        - Unbounded WILD Card (? or T) :
            It represents an unknown type & can be used when we want to accept and
            process any type of parameterized class or collection without specifying
            the exact time.
            EX - ArrayList<T> & ArrayList<?>

        - Bounded WILD Card { (? extends T) or (? super T) } :
            It allow us to specify restrictions on the types that can be used as
            arguments. We can use (? extends T) to specify the argument must be of the
            type T or a subclass of T and we can use (? super T) to specify that
            argument must be of type  T or a super class of T.
            EX - ArrayList<? extends T> & ArrayList<? super T>
----------------------------------------------------------------------------------------