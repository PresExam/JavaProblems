*** CONSTRUCTOR ***

>>  Constructor is a special method which is used to create object
>>  If a user doesn't create a constructor then it is automatically created by
    the JVM.
>>  Whenever a new object is created using the new keyword the constructor is
    called automatically.

>>  There are two types of CONSTRUCTORS :-
        a. Default constructor
        b. Parameterized or user Defined constructor

Q-  Create an employee class in java where the attributes of the class are -
    employee name, employee id, employee dept and employee salary.
    - Initialize the attributes using constructor in java and create a method
      to print the details of employee.
    - Create at least 2 objects.

Q-  Create a student class in java where the attributes of the class are -
    name, usn, marks
    - Initialize the attributes using constructor in java and create a method
      to print the details of students.
    - Create at least 2 objects.

*** ENCAPSULATION ***

>>  Encapsulation is a way to restrict the direct access to some components of an
    object, so users cannot access state values for all of the variables of a
    particular object.

Q-  Create a employee class in java and show the implementation of encapsulation
    using getter and setter methods.

*** INHERITANCE ***

>>  Inheritance in Java is a mechanism in which one object acquires all the
    properties and behaviors of a parent object. It is an important part of
    OOPs (Object Oriented programming system).

Q-  Write a JAVA program that demonstrate INHERITANCE with base class ANIMAL with a
    method EAT and a derived class DOG that extends the ANIMAL class and adds a
    method BARK. In the main method create an instance of DOG and call both EAT &
    BARK methods.

Q-  Write a JAVA program that illustrate type of INHERITANCE by creating base class
    as VEHICLE with a method DRIVE and a derived class car that extends the VEHICLE
    class and add a method HORN. In the main method create an INSTANCE of CAR
    and call both the DRIVE & HORN methods

Q-  Write a JAVA program that demonstrate the use of polymorphism and abstraction.

Q-  Write a JAVA program that demonstrate multi-level INHERITANCE by making three
    different classes A,B & C where each class will have a method as method A,
    method B & method C respectively. Class B is the child of class A and parent of
    class C. Inside the main create objects for each class and call all the methods
    to each of those objects.

Q-  Write a JAVA program to develop a calculator where we have a class as
    SIMPLE CALCULATOR which will have 2 methods ADDITION & SUBTRACTION and another
    class as ADVANCED CALCULATOR which will the child of SIMPLE CALCULATOR which
    includes method as MULTIPLICATION and third class as SUPER ADVANCED CALCULATOR
    which is the child of ADVANCED CALCULATOR will have a method as DIVISION. In
    the main method create an object of SUPER ADVANCED CALCULATOR which will perform
    all the operations of a CALCULATOR.

*** POLYMORPHISM ***

>>  The process by which same method can have different meaning in different classes
    or same class is called POLYMORPHISM.

>>  There are two types of POLYMORPHISM :-
    a. Compile Time Polymorphism - (METHOD OVERLOADING)
    b. Run Time Polymorphism - (METHOD OVERRIDING)

    - If a class with multiple methods having the same name but different parameters
      it is known as METHOD OVERLOADING.
    - If a class with same methods from parent class taken to the child class and
      incremented differently is known as METHOD OVERRIDING.
    - Methods must have the same parameter as in the parent class there should be an
      inheritance relationship between the classes.

*** ABSTRACTION ***

>>  Hiding the implementation details and only showing functionality to the user is
    called ABSTRACTION.

    >>  ABSTRACTION are of two ways in JAVA :-
    a. ABSTRACT CLASSES and METHODS (0% - 100%)
    b. INTERFACES (100%)

        >>> ABSTRACT CLASSES & METHODS -

        1. ABSTRACT Classes -
        - It is a restricted class which can not have objects.
        - We need to inherit this class to create objects.

        2. ABSTRACT Methods -
        - These Methods can be used in Abstract Classes and they do not have a body.
        - The body of a Abstract Method is provided in the Child Class.

        ** An Abstract can have both Abstract Methods and regular Methods.
        ** If we have only Abstract Methods in an Abstract Class it is 100% Abstraction.
        ** That's why Abstract Class can achieve 100% Abstraction.

        >>> INTERFACES
        - An Interface is a complete Abstract Class that is used to group related methods
          with empty bodies.
        - The body of all the methods are provided in the classes with implements the
          Interface.

            >>  Uses of an INTERFACE :-
            a. Security
            b. We achieve Multiple-Inheritance using INTERFACES.
            c. To implement Multiple-Interfaces with separate it with COMAS(,).